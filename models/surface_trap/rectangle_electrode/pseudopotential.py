#!/usr/bin/env python
# -*- coding:utf-8 -*-
#
# Created: Mon 17 Apr 2023
# Author: Carmelo Mordini <cmordini@phys.ethz.ch>
#
# Analytical functions for rectangle electrodes
#
# flake8: noqa

import numpy as np
from numpy import abs as Abs
from numpy import arctan as ArcTan
from numpy import pi as Pi


elementary_charge = 1.602176634e-19
atomic_mass = 1.6605390666e-27
K = elementary_charge / (4 * atomic_mass * (2*Pi*1e6)**2)

def infx_el_potential(x, y, z, y1, y2):
    """potential of one electrode extending between y1 and y2, infinite along x"""
    return (-ArcTan((-y + y1)/z) + ArcTan((-y + y2)/z))/Pi

def infx_el_gradient(x, y, z, y1, y2):
    return np.stack([0,(1/((1 + (-y + y1)**2/z**2)*z) - 1/((1 + (-y + y2)**2/z**2)*z))/Pi,((-y + y1)/((1 + (-y + y1)**2/z**2)*z**2) - (-y + y2)/((1 + (-y + y2)**2/z**2)*z**2))/Pi], axis=-1)

def infx_rf_pair_potential(x, y, z, a, w):
    """RF potential of a pair of symmetric electrodes, infinite along x"""
    return (ArcTan((-0.5*a - y)/z) - ArcTan((-0.5*a - w - y)/z))/Pi + (-ArcTan((a/2. - y)/z) + ArcTan((a/2. + w - y)/z))/Pi

def infx_rf_pair_gradient(x, y, z, a, w):
    return np.stack([0,(-(1/((1 + (-0.5*a - y)**2/z**2)*z)) + 1/((1 + (-0.5*a - w - y)**2/z**2)*z))/Pi + (1/((1 + (a/2. - y)**2/z**2)*z) - 1/((1 + (a/2. + w - y)**2/z**2)*z))/Pi,(-((-0.5*a - y)/((1 + (-0.5*a - y)**2/z**2)*z**2)) + (-0.5*a - w - y)/((1 + (-0.5*a - w - y)**2/z**2)*z**2))/Pi + ((a/2. - y)/((1 + (a/2. - y)**2/z**2)*z**2) - (a/2. + w - y)/((1 + (a/2. + w - y)**2/z**2)*z**2))/Pi], axis=-1)


def pseudo_potential(x, y, z, a, w):
    return K * Abs((-((-0.5*a - y)/((1 + (-0.5*a - y)**2/z**2)*z**2)) + (-0.5*a - w - y)/((1 + (-0.5*a - w - y)**2/z**2)*z**2))/Pi + ((a/2. - y)/((1 + (a/2. - y)**2/z**2)*z**2) - (a/2. + w - y)/((1 + (a/2. + w - y)**2/z**2)*z**2))/Pi)**2 + Abs((-(1/((1 + (-0.5*a - y)**2/z**2)*z)) + 1/((1 + (-0.5*a - w - y)**2/z**2)*z))/Pi + (1/((1 + (a/2. - y)**2/z**2)*z) - 1/((1 + (a/2. + w - y)**2/z**2)*z))/Pi)**2

def pseudo_gradient(x, y, z, a, w):
    return K * np.stack([0,2*((((-2*(-0.5*a - y)**2)/((1 + (-0.5*a - y)**2/z**2)**2*z**4) + (2*(-0.5*a - w - y)**2)/((1 + (-0.5*a - w - y)**2/z**2)**2*z**4) + 1/((1 + (-0.5*a - y)**2/z**2)*z**2) - 1/((1 + (-0.5*a - w - y)**2/z**2)*z**2))/Pi + ((2*(a/2. - y)**2)/((1 + (a/2. - y)**2/z**2)**2*z**4) - (2*(a/2. + w - y)**2)/((1 + (a/2. + w - y)**2/z**2)**2*z**4) - 1/((1 + (a/2. - y)**2/z**2)*z**2) + 1/((1 + (a/2. + w - y)**2/z**2)*z**2))/Pi)*((-((-0.5*a - y)/((1 + (-0.5*a - y)**2/z**2)*z**2)) + (-0.5*a - w - y)/((1 + (-0.5*a - w - y)**2/z**2)*z**2))/Pi + ((a/2. - y)/((1 + (a/2. - y)**2/z**2)*z**2) - (a/2. + w - y)/((1 + (a/2. + w - y)**2/z**2)*z**2))/Pi) + (((-2*(-0.5*a - y))/((1 + (-0.5*a - y)**2/z**2)**2*z**3) + (2*(-0.5*a - w - y))/((1 + (-0.5*a - w - y)**2/z**2)**2*z**3))/Pi + ((2*(a/2. - y))/((1 + (a/2. - y)**2/z**2)**2*z**3) - (2*(a/2. + w - y))/((1 + (a/2. + w - y)**2/z**2)**2*z**3))/Pi)*((-(1/((1 + (-0.5*a - y)**2/z**2)*z)) + 1/((1 + (-0.5*a - w - y)**2/z**2)*z))/Pi + (1/((1 + (a/2. - y)**2/z**2)*z) - 1/((1 + (a/2. + w - y)**2/z**2)*z))/Pi)),2*((((-2*(-0.5*a - y)**3)/((1 + (-0.5*a - y)**2/z**2)**2*z**5) + (2*(-0.5*a - w - y)**3)/((1 + (-0.5*a - w - y)**2/z**2)**2*z**5) + (2*(-0.5*a - y))/((1 + (-0.5*a - y)**2/z**2)*z**3) - (2*(-0.5*a - w - y))/((1 + (-0.5*a - w - y)**2/z**2)*z**3))/Pi + ((2*(a/2. - y)**3)/((1 + (a/2. - y)**2/z**2)**2*z**5) - (2*(a/2. + w - y)**3)/((1 + (a/2. + w - y)**2/z**2)**2*z**5) - (2*(a/2. - y))/((1 + (a/2. - y)**2/z**2)*z**3) + (2*(a/2. + w - y))/((1 + (a/2. + w - y)**2/z**2)*z**3))/Pi)*((-((-0.5*a - y)/((1 + (-0.5*a - y)**2/z**2)*z**2)) + (-0.5*a - w - y)/((1 + (-0.5*a - w - y)**2/z**2)*z**2))/Pi + ((a/2. - y)/((1 + (a/2. - y)**2/z**2)*z**2) - (a/2. + w - y)/((1 + (a/2. + w - y)**2/z**2)*z**2))/Pi) + (((-2*(-0.5*a - y)**2)/((1 + (-0.5*a - y)**2/z**2)**2*z**4) + (2*(-0.5*a - w - y)**2)/((1 + (-0.5*a - w - y)**2/z**2)**2*z**4) + 1/((1 + (-0.5*a - y)**2/z**2)*z**2) - 1/((1 + (-0.5*a - w - y)**2/z**2)*z**2))/Pi + ((2*(a/2. - y)**2)/((1 + (a/2. - y)**2/z**2)**2*z**4) - (2*(a/2. + w - y)**2)/((1 + (a/2. + w - y)**2/z**2)**2*z**4) - 1/((1 + (a/2. - y)**2/z**2)*z**2) + 1/((1 + (a/2. + w - y)**2/z**2)*z**2))/Pi)*((-(1/((1 + (-0.5*a - y)**2/z**2)*z)) + 1/((1 + (-0.5*a - w - y)**2/z**2)*z))/Pi + (1/((1 + (a/2. - y)**2/z**2)*z) - 1/((1 + (a/2. + w - y)**2/z**2)*z))/Pi))], axis=-1)

def pseudo_hessian(x, y, z, a, w):
    xx = 0
    xy = 0
    xz = 0
    yy = 2*((((-2*(-0.5*a - y))/((1 + (-0.5*a - y)**2/z**2)**2*z**3) + (2*(-0.5*a - w - y))/((1 + (-0.5*a - w - y)**2/z**2)**2*z**3))/Pi + ((2*(a/2. - y))/((1 + (a/2. - y)**2/z**2)**2*z**3) - (2*(a/2. + w - y))/((1 + (a/2. + w - y)**2/z**2)**2*z**3))/Pi)**2 + (((-2*(-0.5*a - y)**2)/((1 + (-0.5*a - y)**2/z**2)**2*z**4) + (2*(-0.5*a - w - y)**2)/((1 + (-0.5*a - w - y)**2/z**2)**2*z**4) + 1/((1 + (-0.5*a - y)**2/z**2)*z**2) - 1/((1 + (-0.5*a - w - y)**2/z**2)*z**2))/Pi + ((2*(a/2. - y)**2)/((1 + (a/2. - y)**2/z**2)**2*z**4) - (2*(a/2. + w - y)**2)/((1 + (a/2. + w - y)**2/z**2)**2*z**4) - 1/((1 + (a/2. - y)**2/z**2)*z**2) + 1/((1 + (a/2. + w - y)**2/z**2)*z**2))/Pi)**2 + (((-8*(-0.5*a - y)**3)/((1 + (-0.5*a - y)**2/z**2)**3*z**6) + (8*(-0.5*a - w - y)**3)/((1 + (-0.5*a - w - y)**2/z**2)**3*z**6) + (6*(-0.5*a - y))/((1 + (-0.5*a - y)**2/z**2)**2*z**4) - (6*(-0.5*a - w - y))/((1 + (-0.5*a - w - y)**2/z**2)**2*z**4))/Pi + ((8*(a/2. - y)**3)/((1 + (a/2. - y)**2/z**2)**3*z**6) - (8*(a/2. + w - y)**3)/((1 + (a/2. + w - y)**2/z**2)**3*z**6) - (6*(a/2. - y))/((1 + (a/2. - y)**2/z**2)**2*z**4) + (6*(a/2. + w - y))/((1 + (a/2. + w - y)**2/z**2)**2*z**4))/Pi)*((-((-0.5*a - y)/((1 + (-0.5*a - y)**2/z**2)*z**2)) + (-0.5*a - w - y)/((1 + (-0.5*a - w - y)**2/z**2)*z**2))/Pi + ((a/2. - y)/((1 + (a/2. - y)**2/z**2)*z**2) - (a/2. + w - y)/((1 + (a/2. + w - y)**2/z**2)*z**2))/Pi) + (((-8*(-0.5*a - y)**2)/((1 + (-0.5*a - y)**2/z**2)**3*z**5) + (8*(-0.5*a - w - y)**2)/((1 + (-0.5*a - w - y)**2/z**2)**3*z**5) + 2/((1 + (-0.5*a - y)**2/z**2)**2*z**3) - 2/((1 + (-0.5*a - w - y)**2/z**2)**2*z**3))/Pi + ((8*(a/2. - y)**2)/((1 + (a/2. - y)**2/z**2)**3*z**5) - (8*(a/2. + w - y)**2)/((1 + (a/2. + w - y)**2/z**2)**3*z**5) - 2/((1 + (a/2. - y)**2/z**2)**2*z**3) + 2/((1 + (a/2. + w - y)**2/z**2)**2*z**3))/Pi)*((-(1/((1 + (-0.5*a - y)**2/z**2)*z)) + 1/((1 + (-0.5*a - w - y)**2/z**2)*z))/Pi + (1/((1 + (a/2. - y)**2/z**2)*z) - 1/((1 + (a/2. + w - y)**2/z**2)*z))/Pi))
    yz = 2*((((-2*(-0.5*a - y))/((1 + (-0.5*a - y)**2/z**2)**2*z**3) + (2*(-0.5*a - w - y))/((1 + (-0.5*a - w - y)**2/z**2)**2*z**3))/Pi + ((2*(a/2. - y))/((1 + (a/2. - y)**2/z**2)**2*z**3) - (2*(a/2. + w - y))/((1 + (a/2. + w - y)**2/z**2)**2*z**3))/Pi)*(((-2*(-0.5*a - y)**2)/((1 + (-0.5*a - y)**2/z**2)**2*z**4) + (2*(-0.5*a - w - y)**2)/((1 + (-0.5*a - w - y)**2/z**2)**2*z**4) + 1/((1 + (-0.5*a - y)**2/z**2)*z**2) - 1/((1 + (-0.5*a - w - y)**2/z**2)*z**2))/Pi + ((2*(a/2. - y)**2)/((1 + (a/2. - y)**2/z**2)**2*z**4) - (2*(a/2. + w - y)**2)/((1 + (a/2. + w - y)**2/z**2)**2*z**4) - 1/((1 + (a/2. - y)**2/z**2)*z**2) + 1/((1 + (a/2. + w - y)**2/z**2)*z**2))/Pi) + (((-2*(-0.5*a - y)**3)/((1 + (-0.5*a - y)**2/z**2)**2*z**5) + (2*(-0.5*a - w - y)**3)/((1 + (-0.5*a - w - y)**2/z**2)**2*z**5) + (2*(-0.5*a - y))/((1 + (-0.5*a - y)**2/z**2)*z**3) - (2*(-0.5*a - w - y))/((1 + (-0.5*a - w - y)**2/z**2)*z**3))/Pi + ((2*(a/2. - y)**3)/((1 + (a/2. - y)**2/z**2)**2*z**5) - (2*(a/2. + w - y)**3)/((1 + (a/2. + w - y)**2/z**2)**2*z**5) - (2*(a/2. - y))/((1 + (a/2. - y)**2/z**2)*z**3) + (2*(a/2. + w - y))/((1 + (a/2. + w - y)**2/z**2)*z**3))/Pi)*(((-2*(-0.5*a - y)**2)/((1 + (-0.5*a - y)**2/z**2)**2*z**4) + (2*(-0.5*a - w - y)**2)/((1 + (-0.5*a - w - y)**2/z**2)**2*z**4) + 1/((1 + (-0.5*a - y)**2/z**2)*z**2) - 1/((1 + (-0.5*a - w - y)**2/z**2)*z**2))/Pi + ((2*(a/2. - y)**2)/((1 + (a/2. - y)**2/z**2)**2*z**4) - (2*(a/2. + w - y)**2)/((1 + (a/2. + w - y)**2/z**2)**2*z**4) - 1/((1 + (a/2. - y)**2/z**2)*z**2) + 1/((1 + (a/2. + w - y)**2/z**2)*z**2))/Pi) + (((-8*(-0.5*a - y)**4)/((1 + (-0.5*a - y)**2/z**2)**3*z**7) + (8*(-0.5*a - w - y)**4)/((1 + (-0.5*a - w - y)**2/z**2)**3*z**7) + (10*(-0.5*a - y)**2)/((1 + (-0.5*a - y)**2/z**2)**2*z**5) - (10*(-0.5*a - w - y)**2)/((1 + (-0.5*a - w - y)**2/z**2)**2*z**5) - 2/((1 + (-0.5*a - y)**2/z**2)*z**3) + 2/((1 + (-0.5*a - w - y)**2/z**2)*z**3))/Pi + ((8*(a/2. - y)**4)/((1 + (a/2. - y)**2/z**2)**3*z**7) - (8*(a/2. + w - y)**4)/((1 + (a/2. + w - y)**2/z**2)**3*z**7) - (10*(a/2. - y)**2)/((1 + (a/2. - y)**2/z**2)**2*z**5) + (10*(a/2. + w - y)**2)/((1 + (a/2. + w - y)**2/z**2)**2*z**5) + 2/((1 + (a/2. - y)**2/z**2)*z**3) - 2/((1 + (a/2. + w - y)**2/z**2)*z**3))/Pi)*((-((-0.5*a - y)/((1 + (-0.5*a - y)**2/z**2)*z**2)) + (-0.5*a - w - y)/((1 + (-0.5*a - w - y)**2/z**2)*z**2))/Pi + ((a/2. - y)/((1 + (a/2. - y)**2/z**2)*z**2) - (a/2. + w - y)/((1 + (a/2. + w - y)**2/z**2)*z**2))/Pi) + (((-8*(-0.5*a - y)**3)/((1 + (-0.5*a - y)**2/z**2)**3*z**6) + (8*(-0.5*a - w - y)**3)/((1 + (-0.5*a - w - y)**2/z**2)**3*z**6) + (6*(-0.5*a - y))/((1 + (-0.5*a - y)**2/z**2)**2*z**4) - (6*(-0.5*a - w - y))/((1 + (-0.5*a - w - y)**2/z**2)**2*z**4))/Pi + ((8*(a/2. - y)**3)/((1 + (a/2. - y)**2/z**2)**3*z**6) - (8*(a/2. + w - y)**3)/((1 + (a/2. + w - y)**2/z**2)**3*z**6) - (6*(a/2. - y))/((1 + (a/2. - y)**2/z**2)**2*z**4) + (6*(a/2. + w - y))/((1 + (a/2. + w - y)**2/z**2)**2*z**4))/Pi)*((-(1/((1 + (-0.5*a - y)**2/z**2)*z)) + 1/((1 + (-0.5*a - w - y)**2/z**2)*z))/Pi + (1/((1 + (a/2. - y)**2/z**2)*z) - 1/((1 + (a/2. + w - y)**2/z**2)*z))/Pi))
    h1 = np.asarray([[xx,xy,xz],[xy,yy,yz],[xz,yz,-xx-yy]])
    return K * h1.transpose(tuple(_ for _ in range(2, h1.ndim)) + (0, 1))
